#!/bin/env python3

# cta tracker control 
# Pete Moore Mar 2018

import os
import sys
import logging
from cmd  import Cmd
from os.path import join, dirname, abspath, exists
from terminaltables import SingleTable

import  model.db
from model.cta import CTAArrival, CTARoute
from state import AppState 
import helpers
import cta.protocol
from mycolor import blue

appstate = AppState()  
appstate.datadir = abspath( dirname(__file__) ) # make the tests dir the datadir
appstate.offline = False                        # pull all data from URL sources.

appstate.database = 'flashfact'
appstate.online = True
appstate.databasetype = 'sqlite'
appstate.sqlite_store = '/tmp'

# overrides any logger to stdout setting with False
appstate.loggerstdout=False

logger = logging.getLogger()
helpers.setup_logger(logger, stdout=True)


blue_line = blue('= - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - =')

print("\n" + blue_line)
print("  CTA tracker control submenu. Type main to return to flashfact menu")
print(blue_line)

class CTATracker(Cmd):
    prompt = '(cta tracker command) '

    def __init__(self):
        super().__init__()
        self.cache = None
        self.db = model.db.DB("cta_tracker")
        filename = '{sqlite_store}/{database}.db'.format(**vars(appstate.instance))
        self.db.sqlite(filename)
        
    def do_exit(self, s):
        return True
        
    def do_quit(self, s):
        return True
        
    def do_reload(self, s):
        self.do_restart(s)
    def do_restart(self, s):
        '''restart this menu'''
        os.execv( __file__, sys.argv[0:] )
        
    def do_test(self, s):
        self.db.merge_route_data(routes)
        
    def do_route(self, s):
        '''get route information and store it.
            requires a bus route number example 49B.
        '''
        
        if s == "":
            print("please provide a route number")
            return
        route = s.upper().strip()
         
        routes = cta.protocol.get_routes(route)
        results_header = ['stop_name', 'stop_id', 'direction']

        results = [[i['stop_name'], i['stop_id'], i['direction']] for i in routes]
        results.insert(0, results_header)
        table = SingleTable(results, title=" Stops in route %s" % route)
        print( table.table )
        self.db.merge_route_data(routes)
        print('')
        
    
        
    def do_arrival(self, s):
        '''get bus stop activity and store it in database 
            requires a bus stop number.
        '''
        try: 
            stop = int(s)
        except ValueError: 
            print("please give a bus stop number.")
        stop_activity = cta.protocol.get_bus_stop_activity(stop)
        activity_header = ['eta','minutes','vehicle','final_destination']
        results = [[i['eta'], i['minutes'],i['vehicle'], i['final_destination']] for i in stop_activity]
        results.insert(0,activity_header)
        table = SingleTable(results, title="Route activity for stop id %s" % stop)
        print(table.table)
        self.db.merge_arrival_data(stop_activity)
        
    def do_main(self, s):
        os.execv( dirname(__file__) + '/flashfactcmd', sys.argv[0:] )
        
   
    #def do_setup_database(self, cmd):
    #    if cmd == "":
    #        database_name = input("OK what filename for this database? ")
    #    if not database_name.endswith('.db') :
    #        database_name = database_name + '.db'
    #        
    #    
    #        
    #    print ("ok we will set the database to of", appstate.datadir + "/" + database_name + ' and call it '+ database_name[:3])
    #    
        
    
    

if __name__ == "__main__":
    menu = CTATracker()
    menu.cmdloop()
    
  
        
        
    