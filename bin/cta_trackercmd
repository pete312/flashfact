#!/bin/env python3

# cta tracker control 
# Pete Moore Mar 2018

import os
import sys
import logging
from cmd  import Cmd
from os.path import join, dirname, abspath, exists
from terminaltables import SingleTable
from time import sleep

import  model.db
from model.cta import CTAArrival, CTARoute
from state import AppState 
import helpers
import cta.protocol
from mycolor import blue
from cta import bus_data
import threading
import process

appstate = AppState()  
appstate.datadir = abspath( dirname(__file__) ) # make the tests dir the datadir
appstate.offline = False                        # pull all data from URL sources.

appstate.database = 'flashfact'
appstate.online = True
appstate.databasetype = 'sqlite'
appstate.sqlite_store = '/tmp'

# overrides any logger to stdout setting with False
appstate.loggerstdout=False

logger = logging.getLogger()
helpers.setup_logger(logger, stdout=True)


blue_line = blue('= - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - = - =')

print("\n" + blue_line)
print("  CTA tracker control submenu. Type main to return to flashfact menu")
print(blue_line)

class CTATracker(Cmd):
    prompt = '(cta tracker command) '

    def __init__(self):
        super().__init__()
        self.cache = None
        self.db = model.db.DB("cta_tracker")
        filename = '{sqlite_store}/{database}.db'.format(**vars(appstate.instance))
        self.db.sqlite(filename)
        
    def do_exit(self, s):
        return True
        
    def do_quit(self, s):
        return True
        
    def do_show_routes(self,s):  
        for x,y in bus_data.static_routes:
            print("%s\t%s" % (x,y))
        
    def do_reload(self, s):
        self.do_restart(s)
        
    def do_restart(self, s):
        '''restart this menu'''
        os.execv( __file__, sys.argv[0:] )
        
    def do_test(self, s):
        self.db.merge_route_data(routes)
        
    def do_load_route(self, s):
        '''get a specific route information and store it.
            requires a bus route number example 49B.
        '''
        
        if s == "":
            print("please provide a route number")
            return
        route = s.upper().strip()
         
        routes = cta.protocol.get_routes(route)
        results_header = ['Stop Name', 'Stop ID']

        def display_table(direction, data):
            
            results = [ [i['stop_name'], i['stop_id'] ] for i in data if direction == i['direction'] ]
            if len(results) == 0:
                return
            results.insert(0, results_header)
            table = SingleTable(results, title=" %s stops in route %s" % (direction, route))
            print( table.table )
        
        display_table('Northbound', routes )
        display_table('Southbound', routes )
        display_table('Eastbound', routes )
        display_table('Westbound', routes )
        
        self.db.merge_route_data(routes)
        print('')
        
        
    def do_initialize_routes(self,s ):
    
        for r in bus_data.static_routes:
            self.do_load_route(r[0])
            sleep(.5)
        
    def do_arrival(self, s):
        '''get bus stop activity and store it in database 
            requires a bus stop number.
        '''
        try: 
            stop = int(s)
        except ValueError: 
            print("please give a bus stop number.")
        stop_activity = cta.protocol.get_bus_stop_activity(stop)
        activity_header = ['eta','minutes','vehicle','final_destination']
        results = [[i['eta'], i['minutes'],i['vehicle'], i['final_destination']] for i in stop_activity]
        results.insert(0,activity_header)
        table = SingleTable(results, title="Route activity for stop id %s" % stop)
        print(table.table)
        self.db.merge_arrival_data(stop_activity)
        
    def do_main(self, s):
        os.execv( dirname(__file__) + '/flashfactcmd', sys.argv[0:] )
        
    def do_watch_arrival(self, s):
    
        stop = None
        try: 
            stop = int(s)
        except ValueError: 
            print("please give a bus stop number.")
            return
            
        #watch_arrival(watch_arrival,self.do_arrival, stop, caller=watch_arrival)
            
        t = threading.Thread(target = watch_arrival, args=(test, stop) )
        t.start()
        
    def do_starttest(self,s):
        p  = process.Update()
        p.start()
        self.process = p
        
    def do_stoptest(self,s ):
        self.process.stop()
        
    def do_cancel_watch(self, s):
        stop = None
        try: 
            stop = int(s)
        except ValueError: 
            print("please give a bus stop number.")
            return
        for t in threading.enumerate():
            #if t.getName() == s:
                
            print(t.getName())
 
def watch_arrival( callback, stop, caller=None ):

    helpers.new_timed_callback(callback, seconds=5, args=(stop,) )
    
    
def test(stop):
    print(stop)
    
def watch_arrival(callback, stop):
    while 1:
        callback(stop)
        sleep(5)
    

if __name__ == "__main__":
    menu = CTATracker()
    menu.cmdloop()
    
  
        
        
    