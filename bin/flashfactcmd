#!/bin/env python3

# flashfact control 
# Pete Moore Mar 2018

import os
import sys
from os.path import join, dirname, abspath, exists
from cmd  import Cmd
import  model.db
from model.cta import CTAArrival, CTARoute
from state import AppState 
import logging

import helpers
from mycolor import blue

appstate = AppState()  
appstate.datadir = abspath( dirname(__file__) ) # make the tests dir the datadir
appstate.offline = False                        # pull all data from URL sources.

appstate.database = 'flashfact'
appstate.online = True
appstate.databasetype = 'sqlite'
appstate.sqlite_store = '/tmp'


logger = logging.getLogger()
helpers.setup_logger(logger, stdout=True)

print(blue("\n========================================================================"))
print(blue("*") + " Welcome to flashfact command menu. If lost try help or autocomplete. "+blue("*"))
print(blue("========================================================================"))
class FlashFact(Cmd):
    prompt = '(flashfact command) '
    
    
    def do_create_db(self, s):
        '''Non-destructive creation of main database. i.e. If database already exists, nothing happens.'''
        db = model.db.DB("ctatest")
        
        if appstate.databasetype == "sqlite":
            filename = '{sqlite_store}/{database}.db'.format(**vars(appstate.instance))
            db.sqlite(filename) # select method as sqlite with filename
        db.create()
        print("sqlite database location {filename}".format(filename=filename))
        
    def do_drop_and_create(self,s):
        if s != 'y':
            if input("are you sure you want to recreate database and lose all data?").lower().startswith('y'):
                print("dropping database")
                filename = '{sqlite_store}/{database}.db'.format(**vars(appstate.instance))
                os.remove(filename)
                self.do_create_db("")
    
    def __init__(self):
        super().__init__()
        self.cache = None
    
    def do_exit(self, s):
        return True
        
    def do_quit(self, s):
        return True
        
    def do_test(self, s):
        '''Whatever tests I\'m doing '''
        print('{sqlite_store}/{database}.db'.format(**vars(appstate.instance)))
        
    def do_restart(self, s):
        '''restart this menu'''
        os.execv( __file__, sys.argv[0:] )
        
    def do_cta_tracker(self, s):
        '''Enter the CTA tracker submenu'''
        os.execv( dirname(__file__) + '/cta_trackercmd', sys.argv[0:] )
        

    #def do_setup_database(self, cmd):
    #    if cmd == "":
    #        database_name = input("OK what filename for this database? ")
    #    if not database_name.endswith('.db') :
    #        database_name = database_name + '.db'
    #        
    #    
    #        
    #    print ("ok we will set the database to of", appstate.datadir + "/" + database_name + ' and call it '+ database_name[:3])
    #    
        
        
    

if __name__ == "__main__":
     
    menu = FlashFact()
    menu.cmdloop()
    
  
        
        
    